# ----------------------------------------------------- #
# snakemake pipeline for automatic analysis/QC of mass  #
# spectrometry data                                     #
#                                                       #
# Author: Michael Jahn                                  #
# Date: 2024-09-24                                      #
# License: GPL v3 (for all 3rd party tools              #
# separate licenses apply)                              #
# ----------------------------------------------------- #


# load rules
# -----------------------------------------------------
include: "rules/common.smk"


# load configuration
# -----------------------------------------------------
configfile: "config/config.yml"


# target rule
# -----------------------------------------------------
rule all:
    input:
        "results/email/email.log",
        "results/clean_up/clean_up.log",
        "results/versions/versions.log",
        "results/module_logs/all.log",


# module to fetch protein database from NCBI
# -----------------------------------------------------
rule database:
    params:
        term=config["database"],
    output:
        path=directory("results/database"),
        database="results/database/database.fasta",
    conda:
        "envs/database.yml"
    log:
        path="results/database/database.log",
    script:
        "scripts/prepare_database.py"


# module to generate decoys
# -----------------------------------------------------
rule decoypyrat:
    input:
        path=rules.database.output.database,
    output:
        path="results/decoypyrat/decoy_database.fasta",
    conda:
        "envs/decoypyrat.yml"
    params:
        cleavage_sites=config["decoypyrat"]["cleavage_sites"],
        decoy_prefix=config["decoypyrat"]["decoy_prefix"],
    log:
        path="results/decoypyrat/decoypyrat.log",
    shell:
        "if ! grep -q '>rev_' {input.path};"
        "then decoypyrat {input.path} \
        -c {params.cleavage_sites} \
        -d {params.decoy_prefix} \
        -o {output.path} \
        -k > {log.path}; fi;"
        "cat {input.path} >> {output.path}"


# module to prepare samplesheet
# -----------------------------------------------------
rule samplesheet:
    input:
        path=config["samplesheet"],
    output:
        path="results/samplesheet/samplesheet.tsv",
    conda:
        "envs/basic.yml"
    log:
        path="results/samplesheet/samplesheet.log",
    script:
        "scripts/prepare_samplesheet.py"


# module to prepare workflow
# -----------------------------------------------------
rule workflow:
    input:
        samplesheet=rules.samplesheet.output.path,
        database=rules.decoypyrat.output.path,
    output:
        path="results/workflow/workflow.txt",
    conda:
        "envs/workflow.yml"
    params:
        workflow=config["workflow"],
        workflow_dir=wfpath("../resources"),
    log:
        path="results/workflow/workflow.log",
    script:
        "scripts/prepare_workflow.py"


# module to run fragpipe
# -----------------------------------------------------
rule fragpipe:
    input:
        samplesheet=rules.samplesheet.output.path,
        workflow=rules.workflow.output.path,
    output:
        path=directory("results/fragpipe"),
        msstats="results/fragpipe/msstats.csv",
    conda:
        "envs/fragpipe.yml"
    params:
        fragpipe_dir=config["fragpipe"]["target_dir"],
        fragpipe_bin=config["fragpipe"]["executable"],
        fragpipe_download=config["fragpipe"]["download"],
    log:
        path="results/fragpipe/fragpipe_module.log",
    shell:
        "env=`echo $CONDA_PREFIX`;"
        "if ! test -d ${{env}}/{params.fragpipe_dir}/fragpipe;"
        "then wget -P ${{env}}/{params.fragpipe_dir} {params.fragpipe_download};"
        "unzip -d ${{env}}/{params.fragpipe_dir} ${{env}}/{params.fragpipe_dir}/*.zip;"
        "${{env}}/{params.fragpipe_dir}/{params.fragpipe_bin};"
        "fi;"
        "${{env}}/{params.fragpipe_dir}/{params.fragpipe_bin} "
        "--headless "
        "--workflow {input.workflow} "
        "--manifest {input.samplesheet} "
        "--workdir {output.path} "
        "> {log.path};"


# module to run MSstats
# -----------------------------------------------------
rule msstats:
    input:
        samplesheet=rules.samplesheet.output.path,
        table_msstats=rules.fragpipe.output.msstats,
    output:
        feature_level_data="results/msstats/feature_level_data.csv",
        protein_level_data="results/msstats/protein_level_data.csv",
        comparison_result="results/msstats/comparison_result.csv",
        model_qc="results/msstats/model_qc.csv",
        uniprot="results/msstats/uniprot.csv",
    conda:
        "envs/msstats.yml"
    params:
        config_msstats=config["msstats"],
    log:
        path="results/msstats/msstats.log",
    script:
        "scripts/run_msstats.R"


# module to clean up files after pipeline execution
# -----------------------------------------------------
rule clean_up:
    input:
        samplesheet=rules.samplesheet.output.path,
        msstats=rules.fragpipe.output.msstats,
    conda:
        "envs/basic.yml"
    params:
        pattern="_uncalibrated.mzML",
    log:
        path="results/clean_up/clean_up.log",
    shell:
        "echo 'removed the following files:' >> {log.path};"
        "while read -r line;"
        "do filename=`echo ${{line}} | cut -f 1 -d ' '`;"
        "filename=`echo ${{filename//.raw/{params.pattern}}}`;"
        "if test -f ${{filename}}; then rm ${{filename}}; echo ${{filename}} >> {log.path}; fi;"
        "done < {input.samplesheet};"


# module to fetch software versions from conda envs
# -----------------------------------------------------
rule versions:
    input:
        expand(
            "../workflow/envs/{module}.yml",
            module=[
                "basic",
                "database",
                "decoypyrat",
                "email",
                "fragpipe",
                "msstats",
                "report_html",
                "report_pdf",
                "workflow",
            ],
        ),
    output:
        path="results/versions/packages.txt",
    conda:
        "envs/basic.yml"
    log:
        path="results/versions/versions.log",
    shell:
        "conda env export > {log.path};"
        "cat {input} >> {output.path}"


# module to combine all module log files to single log
# -----------------------------------------------------
rule module_logs:
    input:
        rules.database.log.path,
        rules.decoypyrat.log.path,
        rules.samplesheet.log.path,
        rules.workflow.log.path,
        rules.fragpipe.log.path,
        rules.msstats.log.path,
        rules.clean_up.log.path,
    conda:
        "envs/basic.yml"
    log:
        path="results/module_logs/all.log",
    shell:
        "cat {input} >> {log.path}"


# module to generate full HTML report using R markdown
# -----------------------------------------------------
rule report_html:
    input:
        feature_level_data=rules.msstats.output.feature_level_data,
        protein_level_data=rules.msstats.output.protein_level_data,
        comparison_result=rules.msstats.output.comparison_result,
        model_qc=rules.msstats.output.model_qc,
        versions=rules.versions.output.path,
    output:
        html="results/report/report.html",
    conda:
        "envs/report_html.yml"
    params:
        config_report=config["report"],
    log:
        path="results/report/report_html.log",
    script:
        "notebooks/report.Rmd"


# module to convert HTML to PDF output
# -----------------------------------------------------
rule report_pdf:
    input:
        html=rules.report_html.output.html,
    output:
        pdf="results/report/report.pdf",
    conda:
        "envs/report_pdf.yml"
    log:
        path="results/report/report_pdf.log",
    shell:
        "weasyprint -v {input.html} {output.pdf} &> {log.path}"


# module to send out emails using custom mail server
# -----------------------------------------------------
rule email:
    input:
        html=rules.report_html.output.html,
        pdf=rules.report_pdf.output.pdf,
        protein=rules.msstats.output.protein_level_data,
        comparison=rules.msstats.output.comparison_result,
    output:
        path=directory("results/email"),
    conda:
        "envs/basic.yml"
    params:
        config_email=config["email"],
        config_database=config["database"],
        config_workflow=config["workflow"],
        config_samplesheet=config["samplesheet"],
    log:
        path="results/email/email.log",
    script:
        "scripts/send_email.py"
